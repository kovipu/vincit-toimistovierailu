{"version":3,"sources":["common/ShutterButton.js","common/IconButton.js","CameraView/CameraView.js","ResultFooter/ResultFooter.js","App.js","serviceWorker.js","index.js"],"names":["ShutterButton","hidden","className","onClick","icon","role","IconButton","postScreenshot","img","api","a","console","log","fetch","method","body","JSON","stringify","image","headers","then","r","json","response","CameraView","props","videoRef","React","createRef","canvasRef","state","streamSource","photoTaken","navigator","mediaDevices","getUserMedia","video","facingMode","this","createVideoSource","catch","err","isLoading","onClear","webcamRef","updateFaces","onPhoto","faces","shutterBtn","onFetch","current","getScreenshot","audio","videoConstraints","width","height","ref","screenshotFormat","Component","label","onShowDetails","style","color","aria-hidden","App","lastResponse","submitData","data","setState","blop","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","dataURLtoBlob","formData","FormData","append","mode","responseData","Error","headwearLikelihood","Fragment","res","showDetails","renderCameraView","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48602f75.chunk.js","sourcesContent":["import React from 'react';\nimport './ShutterButton.css';\n\nexport default function ShutterButton({ hidden, className, onClick, icon }) {\n    return <button hidden={hidden} role=\"button\" onClick={onClick} className={`ShutterButton ${className ? className : ''}`}><i className={`fas fa-${icon} fa-2x`}></i></button>\n}","import React from 'react';\nimport './IconButton.css';\n\nexport default function IconButton({ hidden, className, onClick, icon }) {\n    return <button role=\"button\" onClick={onClick} className={`IconButton ${className ? className : ''} ${hidden ? 'IconButton--hidden' : ''}`}><i className={`fas fa-${icon} fa-2x`}></i></button>\n}","import React from 'react';\n\nimport './CameraView.css';\nimport ShutterButton from '../common/ShutterButton';\nimport Webcam from 'react-webcam'\nimport IconButton from '../common/IconButton';\n\n\nconst postScreenshot = async (img, api) => {\n  console.log('posting')\n  const response = await fetch(api, {\n    method: \"POST\",\n    body: JSON.stringify({ image: img }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(r => r.json());\n  return response;\n};\n\n\nclass CameraView extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n\n    this.state = {\n      streamSource: null,\n      photoTaken: false,\n    }\n  }\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })\n        .then(this.createVideoSource)\n        .catch((err) => {\n          console.log('Error', err);\n        });\n    }\n  }\n\n  render() {\n    const { photoTaken } = this.state;\n    const { isLoading, onClear } = this.props;\n    \n    const capture = onFetch => () => {\n      const img = webcamRef.current.getScreenshot();\n      onFetch(img);\n    };\n\n    \n    const videoConstraints = {\n      facingMode: \"user\",\n      width: 512,\n      height: 512\n    };\n    const webcamRef = React.createRef();\n    \n    const updateFaces = async img => {\n      const response = await postScreenshot(img, \"http://10.144.68.104:8080/faces\");\n      this.props.onPhoto(response.faces);\n    };\n\n    const shutterBtn = isLoading\n      ? <ShutterButton onClick={() => {}} icon=\"spinner fa-spin\" /> \n      : <ShutterButton onClick={() => {\n        capture(updateFaces)()\n      }} icon=\"camera\" /> \n\n    return (\n      <div className=\"CameraView\">\n        <div className=\"CameraView-viewfinder\">\n          <IconButton hidden={false} onClick={onClear} className=\"CameraView-clearButton\" icon=\"times\" />\n\n          <Webcam\n            audio={false}\n            videoConstraints={videoConstraints}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n          />          \n        </div>\n        <div className=\"CameraView-footer\">\n          {shutterBtn}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default CameraView;\n","import React from 'react';\nimport Button from '../common/Button';\nimport './ResultFooter.css';\n\nexport default ({ label, onShowDetails }) => {\n    switch (label) {\n      case 'LIKELY':\n      case 'VERY_LIKELY':\n        return (\n          <footer className=\"ResultFooter ResultFooter--success\">\n            <div className=\"ResultFooter-title\">\n            <span>Hattu l√∂ydetty!</span>\n            <i style={{color: '#2ecc71'}} className=\"fa fa-check\" aria-hidden=\"true\"></i>\n            </div>\n          </footer>\n        )\n      default:\n        return (\n          <footer className=\"ResultFooter ResultFooter--failure\">\n            <div className=\"ResultFooter-title\">\n            <span>Ei oo Hattua!</span>\n            <i style={{color: '#e74c3c'}} className=\"fa fa-times\" aria-hidden=\"true\"></i>\n          </div>\n          </footer>\n        );\n    }\n  }","import React, { Component } from 'react';\nimport './App.css';\n\nimport CameraView from './CameraView/CameraView'\nimport ResultFooter from './ResultFooter/ResultFooter'\n\nfunction dataURLtoBlob(dataurl) {\n  var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n  while(n--){\n      u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], {type:mime});\n}\n\nclass App extends Component {\n  state = {\n    lastResponse: {},\n    isLoading: false\n  }\n\n  submitData = (data) => {\n    this.setState({isLoading: true})\n    const blop = dataURLtoBlob(data);\n    const imageData = {\n      uri: data,\n      type: 'image/png',\n      name: 'image.png',\n    }\n    let formData = new FormData();\n    formData.append('image', blop);\n\n    fetch('/faces', {\n      method: 'POST',\n      body: formData,\n      mode: 'cors'\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then(responseData => {\n      this.setState({lastResponse: responseData, isLoading: false})\n    })\n    .catch(err => {\n      this.setState({isLoading: false})\n      throw Error(err);\n    })\n  }\n  \n  renderCameraView() {\n    const { lastResponse, isLoading } = this.state;\n    const { headwearLikelihood } = lastResponse;\n\n    const onPhoto = res => {\n      this.setState({\n        lastResponse: res[0]\n      })\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"App-content\">\n        <CameraView\n          className=\"CameraView-video\"\n          isLoading={isLoading}\n          onClear={() => this.setState({ lastResponse: {} })}\n          onPhoto={onPhoto}/>\n        </div>\n        {headwearLikelihood && (\n          <ResultFooter\n            onShowDetails={this.showDetails}\n            label={headwearLikelihood}/>\n        )}\n      </React.Fragment>\n    )\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      {this.renderCameraView()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}